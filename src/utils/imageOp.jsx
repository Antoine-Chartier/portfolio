// c:\Users\antoi\Local Sites\Portfolio\monPortfolio\src\utils\imageOp.jsx
import React from 'react';
import PropTypes from 'prop-types'; // Optional: for prop type validation

/**
 * Renders a responsive <picture> element with AVIF and WebP sources.
 * Expects data generated by the imageOptimizerPlugin.
 *
 * @param {object} srcData - The structured image data from the plugin.
 * @param {object} srcData.sources - Contains srcset strings for formats.
 * @param {string} srcData.sources.avif - The AVIF srcset string.
 * @param {string} srcData.sources.webp - The WebP srcset string.
 * @param {object} srcData.img - Contains fallback image info.
 * @param {string} srcData.img.src - The fallback image URL.
 * @param {number} srcData.img.w - The original image width.
 * @param {number} srcData.img.h - The original image height.
 * @param {string} alt - The alt text for the image.
 * @param {string} sizes - The sizes attribute string (REQUIRED for srcset effectiveness).
 * @param {string} [loading='lazy'] - The loading attribute ('lazy', 'eager').
 * @param {string} [fetchpriority='auto'] - The fetchpriority attribute ('high', 'low', 'auto').
 * @param {string} [className=''] - Optional additional class names for the <picture> element.
 */
const ImageOp = ({
    srcData,
    alt,
    sizes, // Crucial prop for responsive images
    loading = "lazy",
    fetchpriority = "auto",
    className = ""
}) => {

    // Basic validation for the expected data structure
    if (!srcData || !srcData.sources || !srcData.img || !srcData.img.src || !sizes) {
        if (!sizes) {
            console.warn("ImageOp component requires a 'sizes' prop for responsive images to work correctly.", { srcData });
        } else {
            console.error("Invalid or incomplete srcData passed to ImageOp component.", { srcData });
        }
        // Render nothing or a placeholder if data is invalid
        return null;
    }

    const { sources, img } = srcData;

    return (
        <picture className={className}>
            {/* AVIF source with srcset and sizes */}
            {sources.avif && <source srcSet={sources.avif} type="image/avif" sizes={sizes} />}

            {/* WebP source with srcset and sizes */}
            {sources.webp && <source srcSet={sources.webp} type="image/webp" sizes={sizes} />}

            {/* Fallback <img> tag */}
            <img
                src={img.src} // Fallback src (usually largest generated fallback format)
                alt={alt}
                width={img.w} // Original width for aspect ratio hinting
                height={img.h} // Original height for aspect ratio hinting
                sizes={sizes} // Sizes attribute is also needed on <img>
                loading={loading}
                fetchpriority={fetchpriority}
            />
        </picture>
    );
};

// Optional: Add PropTypes for better development checks
ImageOp.propTypes = {
    srcData: PropTypes.shape({
        sources: PropTypes.shape({
            avif: PropTypes.string,
            webp: PropTypes.string
        }).isRequired,
        img: PropTypes.shape({
            src: PropTypes.string.isRequired,
            w: PropTypes.number.isRequired,
            h: PropTypes.number.isRequired
        }).isRequired
    }).isRequired,
    alt: PropTypes.string.isRequired,
    sizes: PropTypes.string.isRequired, // Make sizes required
    loading: PropTypes.oneOf(['lazy', 'eager']),
    fetchpriority: PropTypes.oneOf(['high', 'low', 'auto']),
    className: PropTypes.string
};

export default ImageOp;
